plugins {
    id "application"
    id "com.github.johnrengelman.shadow" version "5.2.0"
}

group "info.novatec"

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    implementation project(":micronaut-camunda-bpm-feature")
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "info.novatec:micronaut-camunda-bpm-feature:0.0.1-SNAPSHOT"
    implementation "org.camunda.bpm:camunda-engine:$camundaVersion"
    implementation "com.h2database:h2"

    implementation 'javax.servlet:javax.servlet-api:3.1.0'
    implementation 'org.jboss:jboss-vfs:3.1.0.Final'
    implementation 'log4j:log4j:1.2.16'
    implementation 'org.apache.logging.log4j:log4j-api:2.7'
    implementation 'org.apache.logging.log4j:log4j-core:2.7'

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.mockito:mockito-core:3.2.4"
}

test.classpath += configurations.developmentOnly

mainClassName = "info.novatec.micronaut.camunda.example.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

